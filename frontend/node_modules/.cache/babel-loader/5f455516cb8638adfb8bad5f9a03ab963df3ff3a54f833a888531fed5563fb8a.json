{"ast":null,"code":"// src/services/aiService.js\nexport const getAIExplanation = async verse => {\n  try {\n    const response = await fetch('https://api.openai.com/v1/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer YOUR_API_KEY_HERE`\n      },\n      body: JSON.stringify({\n        model: \"text-davinci-003\",\n        // Example OpenAI model\n        prompt: `Explain this Bible verse in modern-day terms: ${verse}`,\n        max_tokens: 150\n      })\n    });\n    const data = await response.json();\n    return data.choices[0].text; // Extract the AI-generated explanation from the response\n  } catch (error) {\n    console.error('Error fetching AI explanation:', error);\n    return 'Sorry, we couldn’t generate an explanation at the moment.';\n  }\n};\n\n// src/services/aiService.js\nexport const getBibleGuidance = async (mood, explanation) => {\n  try {\n    const response = await fetch('https://api.openai.com/v1/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer YOUR_API_KEY`\n      },\n      body: JSON.stringify({\n        model: \"text-davinci-003\",\n        // Example model\n        prompt: `A user feels ${mood} and says \"${explanation}\". Provide relevant Bible passages and advice.`,\n        max_tokens: 150\n      })\n    });\n    const data = await response.json();\n    return data.choices[0].text; // Extract AI response\n  } catch (error) {\n    console.error('Error fetching AI response:', error);\n    return 'Unable to fetch guidance at this time.';\n  }\n};","map":{"version":3,"names":["getAIExplanation","verse","response","fetch","method","headers","body","JSON","stringify","model","prompt","max_tokens","data","json","choices","text","error","console","getBibleGuidance","mood","explanation"],"sources":["/Users/joseph/Desktop/project ideas/ChristIsLord/frontend/src/services/aiService.js"],"sourcesContent":["// src/services/aiService.js\nexport const getAIExplanation = async (verse) => {\n    try {\n      const response = await fetch('https://api.openai.com/v1/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer YOUR_API_KEY_HERE`,\n        },\n        body: JSON.stringify({\n          model: \"text-davinci-003\", // Example OpenAI model\n          prompt: `Explain this Bible verse in modern-day terms: ${verse}`,\n          max_tokens: 150,\n        }),\n      });\n      const data = await response.json();\n      return data.choices[0].text; // Extract the AI-generated explanation from the response\n    } catch (error) {\n      console.error('Error fetching AI explanation:', error);\n      return 'Sorry, we couldn’t generate an explanation at the moment.';\n    }\n  };\n  \n  // src/services/aiService.js\nexport const getBibleGuidance = async (mood, explanation) => {\n  try {\n    const response = await fetch('https://api.openai.com/v1/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer YOUR_API_KEY`,\n      },\n      body: JSON.stringify({\n        model: \"text-davinci-003\", // Example model\n        prompt: `A user feels ${mood} and says \"${explanation}\". Provide relevant Bible passages and advice.`,\n        max_tokens: 150,\n      }),\n    });\n    const data = await response.json();\n    return data.choices[0].text; // Extract AI response\n  } catch (error) {\n    console.error('Error fetching AI response:', error);\n    return 'Unable to fetch guidance at this time.';\n  }\n};\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,gBAAgB,GAAG,MAAOC,KAAK,IAAK;EAC7C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;MACpEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE;MACnB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,KAAK,EAAE,kBAAkB;QAAE;QAC3BC,MAAM,EAAE,iDAAiDT,KAAK,EAAE;QAChEU,UAAU,EAAE;MACd,CAAC;IACH,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;EAC/B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,OAAO,2DAA2D;EACpE;AACF,CAAC;;AAED;AACF,OAAO,MAAME,gBAAgB,GAAG,MAAAA,CAAOC,IAAI,EAAEC,WAAW,KAAK;EAC3D,IAAI;IACF,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;MACpEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE;MACnB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,KAAK,EAAE,kBAAkB;QAAE;QAC3BC,MAAM,EAAE,gBAAgBS,IAAI,cAAcC,WAAW,gDAAgD;QACrGT,UAAU,EAAE;MACd,CAAC;IACH,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;EAC/B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO,wCAAwC;EACjD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}